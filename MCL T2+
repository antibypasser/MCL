Add-Type -AssemblyName System.IO.Compression.FileSystem

$tools = @{
    "ProcessExplorer" = "https://download.sysinternals.com/files/ProcessExplorer.zip"
    "Autoruns"        = "https://download.sysinternals.com/files/Autoruns.zip"
    "ProcessMonitor"  = "https://download.sysinternals.com/files/ProcessMonitor.zip"
    "TCPView"         = "https://download.sysinternals.com/files/TCPView.zip"
    "Sigcheck"        = "https://download.sysinternals.com/files/Sigcheck.zip"
    "Strings"         = "https://download.sysinternals.com/files/Strings.zip"
    "RootkitRevealer" = "https://download.sysinternals.com/files/RootkitRevealer.zip"
    "WinObj"          = "https://download.sysinternals.com/files/WinObj.zip"
}

$destinationRoot = "C:\Tools"
$global:hadError = $false

# Section: C:\Tools Directory
Write-Host $destinationRoot -ForegroundColor Blue

try {
    if (Test-Path $destinationRoot) {
        Write-Host "$destinationRoot already exists. Clearing contents..." -ForegroundColor Green
        Remove-Item -Path "$destinationRoot\*" -Recurse -Force -ErrorAction Stop
    } else {
        Write-Host "Created directory '$destinationRoot'." -ForegroundColor Green
        New-Item -Path $destinationRoot -ItemType Directory -ErrorAction Stop | Out-Null
    }
} catch {
    Write-Host "Failed" -ForegroundColor Red
    $global:hadError = $true
    exit 1
}

# Process each tool
foreach ($tool in $tools.GetEnumerator()) {
    $toolName = $tool.Key
    $url = $tool.Value
    $zipFilePath = Join-Path $destinationRoot "$toolName.zip"
    $extractFolder = Join-Path $destinationRoot $toolName

    Write-Host "" # Blank line for spacing
    Write-Host $toolName -ForegroundColor Blue

    Write-Host ("Downloading " + $toolName + "...") -ForegroundColor Green
    try {
        Invoke-WebRequest -Uri $url -OutFile $zipFilePath -ErrorAction Stop
        Write-Host ($toolName + " downloaded successfully.") -ForegroundColor Green
    } catch {
        Write-Host "Failed" -ForegroundColor Red
        $global:hadError = $true
        continue
    }

    if (-not (Test-Path $extractFolder)) {
        New-Item -Path $extractFolder -ItemType Directory | Out-Null
    }

    try {
        [System.IO.Compression.ZipFile]::ExtractToDirectory($zipFilePath, $extractFolder)
        Write-Host ($toolName + " extracted successfully to folder '" + $extractFolder + "'.") -ForegroundColor Green
    } catch {
        Write-Host "Failed" -ForegroundColor Red
        $global:hadError = $true
    }
}

# ZIP FILES Section
Write-Host "" # Blank line
Write-Host "ZIP FILES" -ForegroundColor Blue

try {
    $zipFiles = Get-ChildItem -Path $destinationRoot -Filter *.zip -Recurse -ErrorAction Stop
    if ($zipFiles) {
        Write-Host ("Deleting all ZIP files in '" + $destinationRoot + "' and subfolders...") -ForegroundColor Green
        $zipFiles | Remove-Item -Force
        Write-Host "ZIP files deleted successfully." -ForegroundColor Green
    } else {
        Write-Host "No ZIP files found to delete." -ForegroundColor Yellow
    }
} catch {
    Write-Host "Failed" -ForegroundColor Red
    $global:hadError = $true
}

Write-Host "" # Blank line

if ($global:hadError) {
    Write-Host "Failed" -ForegroundColor Red
} else {
    Write-Host "Completed" -ForegroundColor Green
}
